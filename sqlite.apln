:Namespace sqlite3
    ⎕ML←1 ⋄ ⎕IO←0

    ⍝ See: https://zetcode.com/db/sqlitec/
    ⍝ https://www.sqlite.org/cintro.html
    ⍝ lib ← '/opt/homebrew/Cellar/sqlite/3.44.2/lib/libsqlite3.dylib'
    ⍝
    ⍝ sqlite3.init lib  
    ⍝ db ← sqlite3.open 'foo.db'
    ⍝ sh ← sqlite3.prepare_v2(db 'SELECT SQLITE_VERSION()')
    ⍝ rc ← sqlite3.step sh
    ⍝ sqlite3.column_text sh 0
    ⍝
    ⍝ 3.44.2
    ⍝ sqlite3.finalize sh
    ⍝ sqlite3.close db

    sqlite_ret_codes ← (⍳29), 100, 101
    sqlite_ret_syms ← 'SQLITE_OK' 'SQLITE_ERROR' 'SQLITE_INTERNAL' 'SQLITE_PERM' 'SQLITE_ABORT' 'SQLITE_BUSY' 'SQLITE_LOCKED' 'SQLITE_NOMEM' 'SQLITE_READONLY' 'SQLITE_INTERRUPT' 'SQLITE_IOERR' 'SQLITE_CORRUPT' 'SQLITE_NOTFOUND' 'SQLITE_FULL' 'SQLITE_CANTOPEN' 'SQLITE_PROTOCOL' 'SQLITE_EMPTY' 'SQLITE_SCHEMA' 'SQLITE_TOOBIG' 'SQLITE_CONSTRAINT' 'SQLITE_MISMATCH' 'SQLITE_MISUSE' 'SQLITE_NOLFS' 'SQLITE_AUTH' 'SQLITE_FORMAT' 'SQLITE_RANGE' 'SQLITE_NOTADB' 'SQLITE_NOTICE' 'SQLITE_WARNING' 'SQLITE_ROW' 'SQLITE_DONE' 'UNKNOWN'

    ⍝ Fundamental data types; see https://www.sqlite.org/c3ref/c_blob.html
    (SQLITE_INTEGER SQLITE_FLOAT SQLITE_TEXT SQLITE_BLOB) ← 1 2 3 4

    dyalib ← 'dyalog64.dylib'
    'get'⎕NA dyalib,'|STRNCPY >0U1[] P U4'
    'put'⎕NA dyalib,'|STRNCPY I4 <0T[] U4'
    'len'⎕NA 'P ',dyalib,'|STRLEN P'

    ∇ init lib
      ⍝ const char *sqlite3_libversion(void);
      ⎕NA'P ',lib,'|sqlite3_libversion'

      ⍝ const char *sqlite3_sourceid(void);
      ⎕NA'P ',lib,'|sqlite3_sourceid'

      ⍝ int sqlite3_libversion_number(void);
      ⎕NA'I4 ',lib,'|sqlite3_libversion_number'

      ⍝ int sqlite3_compileoption_used(const char *zOptName)
      ⎕NA'U4 ',lib,'|sqlite3_compileoption_used <0UTF8[]'

      ⍝ const char *sqlite3_compileoption_get(int N)
      ⎕NA'P ',lib,'|sqlite3_compileoption_get U4'

      ⍝ int sqlite3_threadsafe(void)
      ⎕NA'U4 ',lib,'|sqlite3_threadsafe'

      ⍝ int sqlite3_open(
      ⍝    const char *filename,   ⍝ Database filename (UTF-8) 
      ⍝    sqlite3 **ppDb          ⍝ OUT: SQLite db handle 
      ⍝ )
      ⍝ https://www.sqlite.org/c3ref/open.html
      ⎕NA'I4 ',lib,'|sqlite3_open <0UTF8[] >P'

      ⍝ int sqlite3_close(sqlite3*)
      ⍝ https://www.sqlite.org/c3ref/close.html
      ⎕NA'I4 ',lib,'|sqlite3_close P'

      ⍝ int sqlite3_prepare_v2(
      ⍝     sqlite3 *db,            /* Database handle */
      ⍝     const char *zSql,       /* SQL statement, UTF-8 encoded */
      ⍝     int nByte,              /* Maximum length of zSql in bytes. */
      ⍝     sqlite3_stmt **ppStmt,  /* OUT: Statement handle */
      ⍝     const char **pzTail     /* OUT: Pointer to unused portion of zSql */
      ⍝ );
      ⍝ https://www.sqlite.org/c3ref/prepare.html
      ⎕NA'I4 ',lib,'|sqlite3_prepare_v2 P <0UTF8[] I4 >P >P'

      ⍝ int sqlite3_step(sqlite3_stmt*)
      ⍝ https://www.sqlite.org/c3ref/step.html
      ⎕NA'I4 ',lib,'|sqlite3_step P'

      ⍝ int sqlite3_column_count(sqlite3_stmt *pStmt)
      ⍝ https://www.sqlite.org/c3ref/column_count.html
      ⎕NA'I4 ',lib,'|sqlite3_column_count P'

      ⍝ const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol)
      ⍝ https://www.sqlite.org/c3ref/column_blob.html
      ⎕NA'P ',lib,'|sqlite3_column_text P I4'

      ⍝ double sqlite3_column_double(sqlite3_stmt*, int iCol)
      ⍝ https://www.sqlite.org/c3ref/column_blob.html
      ⎕NA'F8 ',lib,'|sqlite3_column_double P I4'

      ⍝ int sqlite3_column_int(sqlite3_stmt*, int iCol)
      ⍝ https://www.sqlite.org/c3ref/column_blob.html
      ⎕NA'I4 ',lib,'|sqlite3_column_int P I4'

      ⍝ int sqlite3_column_bytes(sqlite3_stmt*, int iCol)
      ⍝ https://www.sqlite.org/c3ref/column_blob.html
      ⎕NA'I4 ',lib,'|sqlite3_column_bytes P I4'

      ⍝ int sqlite3_column_int64(sqlite3_stmt*, int iCol)
      ⍝ https://www.sqlite.org/c3ref/column_blob.html
      ⎕NA'I8 ',lib,'|sqlite3_column_int64 P I4'

      ⍝ const char *sqlite3_column_name(sqlite3_stmt*, int N)
      ⍝ https://www.sqlite.org/c3ref/column_name.html
      ⎕NA'P ',lib,'|sqlite3_column_name P I4'

      ⍝ int sqlite3_column_type(sqlite3_stmt*, int iCol)
      ⍝ https://www.sqlite.org/c3ref/column_blob.html
      ⎕NA'I4 ',lib,'|sqlite3_column_type P I4'

      ⍝ int sqlite3_finalize(sqlite3_stmt *pStmt)
      ⍝ https://www.sqlite.org/c3ref/finalize.html
      ⎕NA'I4 ',lib,'|sqlite3_finalize P'

      ⍝ int sqlite3_exec(
      ⍝   sqlite3*,                                  /* An open database */
      ⍝   const char *sql,                           /* SQL to be evaluated */
      ⍝   int (*callback)(void*,int,char**,char**),  /* Callback function */
      ⍝   void *,                                    /* 1st argument to callback */
      ⍝   char **errmsg                              /* Error msg written here */
      ⍝ );
      ⍝ https://www.sqlite.org/c3ref/exec.html
      ⎕NA'I4 ',lib,'|sqlite3_exec P <0UTF8[] P P >P'

      ⍝ void sqlite3_free(void*)
      ⍝ https://www.sqlite.org/c3ref/free.html
      ⎕NA lib,'|sqlite3_free P'

      ⍝ sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*)
      ⍝ https://www.sqlite.org/c3ref/last_insert_rowid.html
      ⎕NA'I8 ',lib,'|sqlite3_last_insert_rowid P'
    ∇

    ∇ errch err
      :if err ≠ 0
          msg ← (sqlite_ret_codes⍳err)⊃sqlite_ret_syms
          ('Sqlite3 error: ',msg)⎕SIGNAL 11
      :endif
    ∇
    
    ∇ r ← libversion_number
      r ← sqlite3_libversion_number
    ∇

    ∇ r ← sourcecid;l;p
      p ← sqlite3_sourceid
      l ← len p
      r ← 'UTF-8'⎕UCS get l p l
    ∇

    ∇ r ← libversion;l;p
      p ← sqlite3_libversion
      l ← len p
      r ← 'UTF-8'⎕UCS get l p l
    ∇

    ∇ r ← compileoption_used zOptName
      ⍝ sqlite3.compileoption_used ⊂'DEFAULT_AUTOVACUUM'
      r ← sqlite3_compileoption_used zOptName
    ∇

    ∇ r ← compileoption_get N;l;p
      p ← sqlite3_compileoption_get N
      l ← len p
      r ← 'UTF-8'⎕UCS get l p l
    ∇

    ∇ r ← threadsafe
      r ← sqlite3_threadsafe
    ∇

    ∇ r ← open filename;err
      (err r) ← sqlite3_open filename 1
      errch err
    ∇

    ∇ close db;err
      err ← sqlite3_close db
      errch err
    ∇

    ∇ r ← prepare_v2(db zSql);_;err
      ⍝ TODO: return the last element of the returned tuple, too.
      ⍝ As it stands, only the first SQL statement in `stmt` will be compiled.
      (err r _) ← sqlite3_prepare_v2 db zSql ¯1 1 1
      errch err
    ∇

    ∇ r ← step sqlite3_stmt
      r ← sqlite3_step sqlite3_stmt
    ∇

    ∇ r ← column_text(sqlite3_stmt iCol);l;p
      p ← sqlite3_column_text sqlite3_stmt iCol
      l ← len p
      r ← 'UTF-8'⎕UCS get l p l
    ∇

    ∇ r ← column_int(sqlite3_stmt iCol)
      r ← sqlite3_column_int sqlite3_stmt iCol
    ∇

    ∇ r ← column_count(sqlite3_stmt)
      r ← sqlite3_column_count sqlite3_stmt
    ∇

    ∇ r ← column_bytes(sqlite3_stmt iCol)
      ⍝ Size of a BLOB or a UTF-8 TEXT result in bytes
      r ← sqlite3_column_bytes sqlite3_stmt iCol
    ∇

    ∇ r ← column_int64(sqlite3_stmt iCol)
      r ← sqlite3_column_int64 sqlite3_stmt iCol
    ∇

    ∇ r ← column_double(sqlite3_stmt iCol)
      r ← sqlite3_column_double sqlite3_stmt iCol
    ∇

    ∇ r ← column_name(sqlite3_stmt iCol);l;p
      p ← sqlite3_column_name sqlite3_stmt iCol
      l ← len p
      r ← 'UTF-8'⎕UCS get l p l
    ∇

    ∇ r ← column_type(sqlite3_stmt iCol)
      ⍝ Returns one of SQLITE_INTEGER, SQLITE_FLOAT, SQLITE_TEXT, SQLITE_BLOB, or SQLITE_NULL
      r ← sqlite3_column_type sqlite3_stmt iCol
    ∇

    ∇ r ← finalize sqlite3_stmt;err
      err ← sqlite3_finalize sqlite3_stmt
      errch err
    ∇

    ∇ exec(db sql);errmsg;l;msg;rc
      ⍝ The last argument (the returned error message string) must be freed.
      ⍝ Note: we can't use the callback feature without writing C.
      (rc errmsg) ← sqlite3_exec db sql 0 0 1
      :if rc ≠ 0
          l ← len errmsg
          msg ← 'UTF-8'⎕UCS get l errmsg l
          sqlite3_free errmsg
          ('Sqlite3 error: ',msg)⎕SIGNAL 11
      :endif
    ∇

    ∇ r←last_insert_rowid db
      r←sqlite3_last_insert_rowid db
    ∇

    ∇ r←row sqlite3_stmt;col;count;size;type
      count ← sqlite3_column_count sqlite3_stmt
      r ← ⍬
      :for col :in ⍳count
          type ← sqlite3_column_type sqlite3_stmt col
          size ← sqlite3_column_bytes sqlite3_stmt col
          :select type
          :case SQLITE_INTEGER
              :if size ≤ 4
                  r ,← ⊂column_int sqlite3_stmt col
              :else
                  r ,← ⊂column_int64 sqlite3_stmt col
              :endif
          :case SQLITE_FLOAT
              r ,← ⊂column_double sqlite3_stmt col
          :case SQLITE_TEXT
              r ,← ⊂column_text sqlite3_stmt col
          :else
              ⍝ TODO: SQLITE_BLOB should not be NULL
              r ,← ⊂⎕NULL
          :endselect
      :endfor
    ∇
    
:EndNamespace
